#########
# Basics
#########
- test fixture = fixed data and fixed environment so that test runs and results are repeatable
- input data, mock objects, loading database with known data, etc

- unit testing = ideally 70-80% converage
- no external dependencies, no database, no spring context, etc

- integration tests = between objects and overall system
- can include spring context, database and message brokers, etc

- functional tests = testing the running application which is live and deployed
- testing functionality like using a web driver, calling web services, sending/receiving messages, etc

- unit tests => integration tests => functional tests

- tdd = unit tests first -> fix -> refactor
- bdd = given -> when -> then

- mocks = fake implementation of a class
- test double for dependent objects - expected - verify

- spy = like a mock but real object


#####################
# Testing Frameworks
#####################
# Junit
- most popular
- Junit 5 released on 2017

# TestNG
- 2004 as an alternative to Junit

# Spock
- in groovy
- BDD
- own mocking framework built-in

# Cucumber
- BDD
- for java, ruby, js
- very popular in Ruby
- Gherkin syntax

# Mockito
- only for mocks
- used with Junit or TestNG

# REST-assured
- for testing RESTful web services
- BDD

# Selenium
- only web browser automation
- used with Junit, TestNG or Spock

##########
# CI / CD
##########
# Continuous Integration
Check-in code => automated build and tests triggered => results via email or other means to report errors if any

- Common CI Build servers
self-hosted: Jenkins, Bamboo, TeamCity, Hudson
cloud based: TravisCI, Gitlab CI, AWS CodeBuild

# Continuous Deployment
- automatically deploy build artifacts after all CI tests have run to dev / uat / staging
example - AWS CodePipeline

# Continuous Delivery
- automatically deliver code changes directly to the prod
- involves high degree of automation in testing and deployment
- not used in banks because of compliance

Continuous Integration => Continuous Deployment => Continuous Delivery


##################
# TDD By Example
##################
- famous book by Kent Beck

## Project 1: Multi Currency Money
- add amounts in 2 different currencies
- multiply an amount by a number of shares

# TDD TODO list
- $5 + 10 CHF = $10 (2 CHF = 1 USD)
- $5 * 2 = $10
- Make "amount" private
- Dollar side affects ?
- Money Rounding ?
- equals()



##########
# JUnit5
##########
- for maven setup, need to add 2 dependencies
junit-jupiter-api
junit-jupiter-engine

- need to add build plugins
maven-compiler-plugin
maven-surefire-plugin
maven-failsafe-plugin

- for Java11, add configuration for surefire + failsafe plugin
        <version>2.22.0</version>
        <configuration>
              <argLine>
                     --illegal-access=permit
              </argLine>
        </configuration>

- for gradle setup, similarly add 2 dependencies as above
- for executing test, just add this:
test {
    useJUnitPlatform()
    testLogging.showStandardStreams(true)
}

- Assertions API
https://junit.org/junit5/docs/5.0.1/api/org/junit/jupiter/api/Assertions.html

- grouped assertions
        //given
        Person person = new Person(1L, "Kent", "Beck");

        //then
        assertAll("Test Props Set",
                () -> assertEquals("Kent", person.getFirstName(), "First Name Failed"),
                () -> assertEquals("Beck", person.getLastName(), "Last Name Failed")
        );

- to disable a test, just put @Disabled
    @Disabled
    @Test
    void findByLastName() {
        Owner foundOwner = service.findByLastName("Buck");
    }

- can disable at the class level
@Disabled(value = "Disabled until we learn Mocking")
class OwnerSDJpaServiceTest {}

- can put display name for the test
@DisplayName("Test Proper View name is returned for index page")
@Test
void index() {}

- test exception using assertThrows()
        assertThrows(ValueNotFoundException.class, () -> {
            controller.oopsHandler();
        });

- can test timeout for a function / executable
        assertTimeoutPreemptively(Duration.ofMillis(100), () -> {
            Thread.sleep(2000);
        });

- test using assumptions, if the assumption is false, test is ignored
assumeTrue("GURU".equalsIgnoreCase(System.getenv("GURU_RUNTIME")));
- assumption test is useful for checking if config / env is good to proceed to test with

# Conditional Testing
- examples are self-explanatory
    @EnabledOnOs(OS.WINDOWS)
    @Test
    void testMeOnWindows() {}

    @EnabledOnJre(JRE.JAVA_8)
    @Test
    void testMeOnJava8() {}

    @EnabledIfEnvironmentVariable(named = "username", matches = "rishi")
    @Test
    void testIfUserRishi() {}


# AssertJ
- need to add dependency
        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <version>3.19.0</version>
            <scope>test</scope>
        </dependency>

- sample test assertion
assertThat(controller.index()).isEqualTo("index");


# Hamcrest
- add dependency
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-library</artifactId>
            <version>1.3</version>
            <scope>test</scope>
        </dependency>

- sample test assertion
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.is;

assertThat(owner.getCity(), is("Key West"));


##################
# Advanced Junit5
##################

# Tagging
- used for grouping tests
- example:
@Tag("model")
class OwnerTest {}

- then in Run configurations -> Create new Junit -> change the Test Kind to Tags and then value as tag, say model
- then when the test is run, it will only run tagged unit test classes

# Nesting
- can create nested test class inside another test class - same as inner class
- example:
class OwnerTest{
        @Nested
        class PetTest{}
}

# Interface
- can create interface test
- usage is to tag it and can implement in all the classes for tag testing
- can define default methods in the interface

# Repeated Test
- can repeat a test any number of times
- example1:
    @RepeatedTest(10)
    void myRepeatedTest() {}

- example2:
    @RepeatedTest(value = 10, name = "{displayName} : {currentRepetition} - {totalRepetitions}")
    @DisplayName("My Repeated Test")
    void myRepeatedTest() {}

- example3: repeated test with DI
    @RepeatedTest(5)
    void myRepeatedTestWithDI(TestInfo testInfo, RepetitionInfo repetitionInfo) {
        System.out.println(testInfo.getDisplayName() + ": " + repetitionInfo.getCurrentRepetition());
    }

- example3 only works with RepetitionInfo if the test case is annotated with @Repeated


######################
# Parameterized Tests
######################
- maven dependency on junit-jupiter-params
- example is self explanatory:
    @ParameterizedTest
    @ValueSource(strings = {"Spring", "Framework", "Guru"})
    void testValueSource(String val) {
        System.out.println(val);
    }

- we can pass parameters to ParameterizedTest same as RepeatedTest

- Enum Source test - all parameters are from enum
    @DisplayName("Enum Source Test")
    @ParameterizedTest(name = "{displayName} - [{index}] {arguments}")
    @EnumSource(OwnerType.class)
    void enumTest(OwnerType ownerType) {
        System.out.println(ownerType.name());
    }

- CSV Input test - best to parameterize different arguments
    @DisplayName("CSV Input Test")
    @ParameterizedTest(name = "{displayName} - [{index}] {arguments}")
    @CsvSource({
            "FL, 1, 4",
            "OH, 2, 8",
            "MI, 5, 3"
    })
    void csvInputTest(String stateName, int val1, int val2) {
        System.out.printf("%s = %d:%d%n", stateName, val1, val2);
    }

- CSV From input file - handy for QA testings from different team
    @DisplayName("CSV From File Test")
    @ParameterizedTest(name = "{displayName} - [{index}] {arguments}")
    @CsvFileSource(resources = "/input.csv", numLinesToSkip = 1)
    void csvFromFileTest(String stateName, int val1, int val2) {
        System.out.printf("%s = %d:%d%n", stateName, val1, val2);
    }

- Method Provider Test - this can take parameters arguments from a static method
    @DisplayName("Method Provider Test")
    @ParameterizedTest(name = "{displayName} - [{index}] {arguments}")
    @MethodSource("getArgs")
    void fromMethodTest(String stateName, int val1, int val2) {
        System.out.printf("%s = %d:%d%n", stateName, val1, val2);
    }

    static Stream<Arguments> getArgs() {
        return Stream.of(
                Arguments.of("FL", 9, 3),
                Arguments.of("OH", 2, 1),
                Arguments.of("MI", 1, 7)
        );
    }

- Custom Provider test - can take parameters from separate class which implements ArgumentsProvider
    @DisplayName("Custom Provider Test")
    @ParameterizedTest(name = "{displayName} - [{index}] {arguments}")
    @ArgumentsSource(CustomArgsProvider.class)
    void fromCustomerProviderTest(String stateName, int val1, int val2) {
        System.out.printf("%s = %d:%d%n", stateName, val1, val2);
    }


#################
# Test Execution
#################

# maven-surefire-plugin
- runs the tests
- plugin example:
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.22.0</version>
                <configuration>
                    <argLine>
                        --illegal-access=permit
                    </argLine>
                </configuration>
            </plugin>

# maven-failsafe-plugin
- run the integration tests ending with IT
- plugin example to run integration tests in verify phase (mvn clean verify)
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>2.22.0</version>
                <configuration>
                    <argLine>
                        --illegal-access=permit
                    </argLine>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

# maven SurefireTest reporting
- used for generating site for the project (mvn clean site)
maven-site-plugin
maven-surefire-report-plugin

# execute junit test with tags in maven
- need to update configuration in surefire plugin: groups, excludedGroups
- example:
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.22.0</version>
                <configuration>
                    <argLine>
                        --illegal-access=permit
                    </argLine>
                    <groups>model</groups>
                    <excludedGroups>controllers</excludedGroups>
                </configuration>
            </plugin>


############################
# Junit testing with Gradle
############################
Forked project: https://github.com/risrivas/testing-java-junit5-gradle






##########
# Mockito
##########
- 2 maven dependencies
mockito-core
mockito-junit-jupiter

- can create mock for any class - calling any method on mock will return default value if not void return type
Map mapMock = mock(Map.class);
assertEquals(0, mapMock.size());

- can use annotations to create mock
@Mock
Map<String, Object> mapMock;

- should use annotation at class level to avoid any setup method
@ExtendWith(MockitoExtension.class)
public class JUnitExtensionTest {}

# Inject mocks
- if a class has a dependency in a constructor
example:
    private final SpecialtyRepository specialtyRepository;

    public SpecialitySDJpaService(SpecialtyRepository specialtyRepository) {
        this.specialtyRepository = specialtyRepository;
    }

- create a mock like this:
    @Mock
    SpecialtyRepository specialtyRepository;

    @InjectMocks
    SpecialitySDJpaService service;

- now can use service and all its methods to test

# verify
- if mock is calling any method, we can verify how many times and arguments it called any method
- example:

- code
    @Override
    public void deleteById(Long aLong) {
        specialtyRepository.deleteById(aLong);
    }

- test code
    @Test
    void deleteById() {
        service.deleteById(1L);
        service.deleteById(1L);

        verify(specialtyRepository, times(2)).deleteById(1L);
    }

- other methods likes times()
verify(specialtyRepository, atLeastOnce()).deleteById(1L);
verify(specialtyRepository, atMost(5)).deleteById(1L);
verify(specialtyRepository, never()).deleteById(4L);

# return values from mock
- if the mock is returning any value, then we can return whatever value we want to return
- example:

- code
    @Override
    public Speciality findById(Long aLong) {
        return specialtyRepository.findById(aLong).orElse(null);
    }

- test code
    @Test
    void findByIdTest() {
        Speciality speciality = new Speciality("mock special");
        when(specialtyRepository.findById(1L)).thenReturn(Optional.of(speciality));

        Speciality foundSpeciality = service.findById(1L);

        assertThat(foundSpeciality).isNotNull();
        assertThat(foundSpeciality.getDescription()).isEqualTo("mock special");

        verify(specialtyRepository).findById(1L);
    }

- can use any(), any(abc.class), anyLong() etc in verify method arguments
verify(specialtyRepository).findById(anyLong());
verify(specialtyRepository).delete(any(Speciality.class));


##############
# Mockito BDD
##############

- given - when - then
org.mockito.BDDMockito.given
org.mockito.BDDMockito.when
org.mockito.BDDMockito.then

- for ex, "when" can be replaced with "given" as below
Speciality speciality = new Speciality("mock special");
when(specialtyRepository.findById(1L)).thenReturn(Optional.of(speciality));
=>
given(specialtyRepository.findById(1L)).willReturn(Optional.of(speciality));

- similarly, "verify" can be replaced with "then"
verify(specialtyRepository).findById(1L);
=>
then(specialtyRepository).should().findById(1L);

- other methods
then(specialtyRepository).should(times(1)).findById(anyLong());
then(specialtyRepository).shouldHaveNoMoreInteractions();

    @Test
    void findByIdBddTest() {
        // given
        Speciality speciality = new Speciality("bdd");
        given(specialtyRepository.findById(1L)).willReturn(Optional.of(speciality));

        // when
        Speciality foundSpeciality = service.findById(1L);

        // then
        assertThat(foundSpeciality).isNotNull();
        assertThat(foundSpeciality.getDescription()).isEqualTo("bdd");
        then(specialtyRepository).should().findById(1L);
        then(specialtyRepository).should(times(1)).findById(anyLong());
        then(specialtyRepository).shouldHaveNoMoreInteractions();
    }



###################
# Advanced Mockito
###################

# throw exceptions
examples:
- using doThrow().when()
    @Test
    void testDoThrow() {
        doThrow(new RuntimeException("boom")).when(specialtyRepository).delete(any(Speciality.class));
        assertThrows(RuntimeException.class,
                () -> specialtyRepository.delete(new Speciality()));
        verify(specialtyRepository).delete(any(Speciality.class));
    }

- using bdd - given().willThrow()
    @Test
    void testFindByIDThrows() {
        given(specialtyRepository.findById(1L)).willThrow(new RuntimeException("boom"));
        assertThrows(RuntimeException.class,
                () -> specialtyRepository.findById(1L));
        then(specialtyRepository).should().findById(1L);
    }

- using bdd - willThrow().given()
    @Test
    void testDeleteBDD() {
        willThrow(new RuntimeException("boom")).given(specialtyRepository).delete(any(Speciality.class));
        assertThrows(RuntimeException.class,
                () -> specialtyRepository.delete(new Speciality()));
        then(specialtyRepository).should().delete(any(Speciality.class));
    }


