#########
# Basics
#########
- test fixture = fixed data and fixed environment so that test runs and results are repeatable
- input data, mock objects, loading database with known data, etc

- unit testing = ideally 70-80% converage
- no external dependencies, no database, no spring context, etc

- integration tests = between objects and overall system
- can include spring context, database and message brokers, etc

- functional tests = testing the running application which is live and deployed
- testing functionality like using a web driver, calling web services, sending/receiving messages, etc

- unit tests => integration tests => functional tests

- tdd = unit tests first -> fix -> refactor
- bdd = given -> when -> then

- mocks = fake implementation of a class
- test double for dependent objects - expected - verify

- spy = like a mock but real object


#####################
# Testing Frameworks
#####################
# Junit
- most popular
- Junit 5 released on 2017

# TestNG
- 2004 as an alternative to Junit

# Spock
- in groovy
- BDD
- own mocking framework built-in

# Cucumber
- BDD
- for java, ruby, js
- very popular in Ruby
- Gherkin syntax

# Mockito
- only for mocks
- used with Junit or TestNG

# REST-assured
- for testing RESTful web services
- BDD

# Selenium
- only web browser automation
- used with Junit, TestNG or Spock

##########
# CI / CD
##########
# Continuous Integration
Check-in code => automated build and tests triggered => results via email or other means to report errors if any

- Common CI Build servers
self-hosted: Jenkins, Bamboo, TeamCity, Hudson
cloud based: TravisCI, Gitlab CI, AWS CodeBuild

# Continuous Deployment
- automatically deploy build artifacts after all CI tests have run to dev / uat / staging
example - AWS CodePipeline

# Continuous Delivery
- automatically deliver code changes directly to the prod
- involves high degree of automation in testing and deployment
- not used in banks because of compliance

Continuous Integration => Continuous Deployment => Continuous Delivery


##################
# TDD By Example
##################
- famous book by Kent Beck

## Project 1: Multi Currency Money
- add amounts in 2 different currencies
- multiply an amount by a number of shares

# TDD TODO list
- $5 + 10 CHF = $10 (2 CHF = 1 USD)
- $5 * 2 = $10
- Make "amount" private
- Dollar side affects ?
- Money Rounding ?
- equals()



##########
# JUnit5
##########
- for maven setup, need to add 2 dependencies
junit-jupiter-api
junit-jupiter-engine

- need to add build plugins
maven-compiler-plugin
maven-surefire-plugin
maven-failsafe-plugin

- for Java11, add configuration for surefire + failsafe plugin
        <version>2.22.0</version>
        <configuration>
              <argLine>
                     --illegal-access=permit
              </argLine>
        </configuration>

- for gradle setup, similarly add 2 dependencies as above
- for executing test, just add this:
test {
    useJUnitPlatform()
    testLogging.showStandardStreams(true)
}

- Assertions API
https://junit.org/junit5/docs/5.0.1/api/org/junit/jupiter/api/Assertions.html

- grouped assertions
        //given
        Person person = new Person(1L, "Kent", "Beck");

        //then
        assertAll("Test Props Set",
                () -> assertEquals("Kent", person.getFirstName(), "First Name Failed"),
                () -> assertEquals("Beck", person.getLastName(), "Last Name Failed")
        );

- to disable a test, just put @Disabled
    @Disabled
    @Test
    void findByLastName() {
        Owner foundOwner = service.findByLastName("Buck");
    }

- can disable at the class level
@Disabled(value = "Disabled until we learn Mocking")
class OwnerSDJpaServiceTest {}

- can put display name for the test
@DisplayName("Test Proper View name is returned for index page")
@Test
void index() {}

- test exception using assertThrows()
        assertThrows(ValueNotFoundException.class, () -> {
            controller.oopsHandler();
        });

- can test timeout for a function / executable
        assertTimeoutPreemptively(Duration.ofMillis(100), () -> {
            Thread.sleep(2000);
        });

- test using assumptions, if the assumption is false, test is ignored
assumeTrue("GURU".equalsIgnoreCase(System.getenv("GURU_RUNTIME")));
- assumption test is useful for checking if config / env is good to proceed to test with

# Conditional Testing
- examples are self-explanatory
    @EnabledOnOs(OS.WINDOWS)
    @Test
    void testMeOnWindows() {

    }

    @EnabledOnJre(JRE.JAVA_8)
    @Test
    void testMeOnJava8() {

    }

    @EnabledIfEnvironmentVariable(named = "username", matches = "rishi")
    @Test
    void testIfUserRishi() {

    }


# AssertJ
- need to add dependency
        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <version>3.19.0</version>
            <scope>test</scope>
        </dependency>

- sample test assertion
assertThat(controller.index()).isEqualTo("index");


# Hamcrest
- add dependency
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-library</artifactId>
            <version>1.3</version>
            <scope>test</scope>
        </dependency>

- sample test assertion
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.is;

assertThat(owner.getCity(), is("Key West"));


##################
# Advanced Junit5
##################

# Tagging
- used for grouping tests
- example:
@Tag("model")
class OwnerTest {}

- then in Run configurations -> Create new Junit -> change the Test Kind to Tags and then value as tag, say model
- then when the test is run, it will only run tagged unit test classes

# Nesting
- can create nested test class inside another test class - same as inner class
- example:
class OwnerTest{
        @Nested
        class PetTest{}
}

# Interface
- can create interface test
- usage is to tag it and can implement in all the classes for tag testing
- can define default methods in the interface

# Repeated Test
- can repeat a test any number of times
- example1:
    @RepeatedTest(10)
    void myRepeatedTest() {}

- example2:
    @RepeatedTest(value = 10, name = "{displayName} : {currentRepetition} - {totalRepetitions}")
    @DisplayName("My Repeated Test")
    void myRepeatedTest() {}

- example3: repeated test with DI
    @RepeatedTest(5)
    void myRepeatedTestWithDI(TestInfo testInfo, RepetitionInfo repetitionInfo) {
        System.out.println(testInfo.getDisplayName() + ": " + repetitionInfo.getCurrentRepetition());
    }

- example3 only works with RepetitionInfo if the test case is annotated with @Repeated







